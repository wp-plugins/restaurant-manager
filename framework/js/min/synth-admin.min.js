"use strict";

// Global Namespace
var syn_restaurant_manager_js = {};

var syn_restaurant_manager_js_core = null;
var syn_restaurant_manager_js_controls = null;
var syn_restaurant_manager_js_shortcodes = null;






jQuery(document).ready(function()
{
    syn_restaurant_manager_js_core = new syn_restaurant_manager_js.SynthCore();
    syn_restaurant_manager_js_controls = new syn_restaurant_manager_js.SynthControls();
    syn_restaurant_manager_js_shortcodes = new syn_restaurant_manager_js.SynthShortcodes();
});
/* 
 * SyntaxThemes Core
 * 
 * @author Ryan Haworth
 */
(function(context, window, document, undefined) {

    "use strict";

    context.SynthCore = function(options) {

        this.initialize();
    };

    context.SynthCore.prototype = {
        initialize: function() {

            this.create_nested_shortcode_modal();
            this.template_sidebar_chooser();
        },
        create_nested_shortcode_modal: function() {

            jQuery(document.body).on('click', '.activate-nested-modal', function(event) {

                var control = jQuery(this).closest('.synth-control-root');
                var selected_item = jQuery(this);
                var parent_shortcode_name = jQuery(this).closest('ul').data('parent-shortcode');
                var config = synth_taurus_scodes.globals['synth_taurus_shortcodes_button'].config;
                var parent_shortcode = config[parent_shortcode_name];
                var nested_shortcode = config[parent_shortcode.nested_shortcode];
                var template = selected_item.find('textarea').html();
                var template2 = control.find('.item-template').html();
                var data = control.find('.item-template').data('parts');

                var params = {
                    scope: this,
                    modal_title: nested_shortcode.heading,
                    modal_style: 'style="z-index: 10003; margin: 50px;"',
                    modal_button: nested_shortcode.modal_button,
                    modal_bg_style: 'style="z-index: 10002"',
                    modal_template: template,
                    ajax_hook: nested_shortcode.name,
                    load_callback: nested_shortcode.modal_support,
                    save_callback: function(values) {

                        var params = [];
                        var shortcode;
                        var merged_template;

                        params = syn_restaurant_manager_js_core.extract_shortcode_params(nested_shortcode.name, values);
                        merged_template = syn_restaurant_manager_js_core.merge_template(template2, data, params);
                        shortcode = syn_restaurant_manager_js_core.create_shortcode_tag(config[parent_shortcode_name].nested_shortcode, params);

                        //place the output into the text area.
                        selected_item.find('textarea').html(shortcode);
                        selected_item.find('.template').html(merged_template);
                    }
                };

                new jQuery.synthModal(params);
            });
        },
        create_shortcode_tag: function(shortcode, params) {

            var tag = {};
            var attributes = '';
            var content = '';
            var output = '';
            var seperator = ' ';

            //get the content
            if (typeof params.content !== 'undefined') {

                if (typeof params.content === 'object') {

                    if (jQuery.isArray(params.content)) {
                        seperator = '\n';
                    }

                    for (var i = 0; i < params.content.length; i++)
                    {
                        params.content[i] = jQuery.trim(params.content[i]);
                    }
                    content += params.content.join(seperator);
                }
                else {
                    content = jQuery.trim(params.content);
                }
                delete params.content;
            }

            if (typeof params.editor !== 'undefined') {

                if (typeof params.editor === 'string') {

                    content += jQuery.trim(params.editor);
                }
                delete params.editor;
            }

            for (var key in params) {

                if (params.hasOwnProperty(key)) {
                    if (params[key] !== "") {
                        attributes += key + '="' + params[key] + '" ';
                    }
                }
            }

            tag.start = '[' + shortcode + ((attributes !== '') ? ' ' + jQuery.trim(attributes) : '');
            tag.close = ']';

            if (content) {
                tag.start += ']';
                tag.close = '[/' + shortcode + ']';
            }

            output = tag.start + content + tag.close;

            return output;
        },
        extract_shortcode_params: function(shortcode_name, values) {

            var params = [];

            var prefix = shortcode_name + '_';

            for (var val in values) {

                var name = val.replace(prefix, "");
                if (name !== val && name !== prefix) {

                    params[name] = values[val];
                    delete values[val];
                }
            }
            values = null;

            return params;
        },
        merge_template: function(template, params, values) {

            for (var key in params) {
                var part = params[key];
                template = template.replace('%' + part + '%', values[part]);
            }

            return template;

        },
        template_sidebar_chooser: function() {

            var selected = jQuery('#page_sidebar_layout_selector').val();
            on_page_sidebar_configuration_update(selected);
            on_page_template_changed();

            function on_page_template_changed() {

                jQuery('#page_sidebar_layout_selector').on('change', function() {

                    var selected = jQuery(this).val();
                    on_page_sidebar_configuration_update(selected);
                });
            }

            function on_page_sidebar_configuration_update(selected) {

                jQuery('#primary_widget_area_sidebar').hide();
                jQuery('#secondary_widget_area_sidebar').hide();
                jQuery('#empty_widget_area_sidebar').hide();

                if (selected === 'page-templates/full-width-content.php') {
                    jQuery('#empty_widget_area_sidebar').show();
                }
                if ((selected === 'one_left_sidebar') || (selected === 'one_right_sidebar')) {
                    jQuery('#primary_widget_area_sidebar').show();
                }
                if ((selected === 'two_left_sidebars') || (selected === 'two_right_sidebars') || (selected === 'left_right_sidebars') || (selected === 'right_left_sidebars')) {
                    jQuery('#primary_widget_area_sidebar').show();
                    jQuery('#secondary_widget_area_sidebar').show();
                }
            }
        }
    };

})(syn_restaurant_manager_js, window, document);
/* 
 * SyntaxThemes Controls Backend
 * 
 * @author Ryan Haworth
 */
(function(context, window, document, undefined) {

    context.SynthControls = function(options) {

        this.initialize();
    };

    context.SynthControls.prototype = {
        initialize: function() {

            this.color_picker_initialize();
        },
        color_picker_initialize: function() {
            /**
             * Initialize color picker
             */
            if (typeof jQuery.wp === 'object' && typeof jQuery.wp.wpColorPicker === 'function') {

                jQuery('input:text.synth-colorpicker').wpColorPicker();

            } else {
                jQuery('input:text.synth-colorpicker').each(function(i) {

                    jQuery(this).after('<div id="picker-' + i + '" style="z-index: 1000; background: #EEE; border: 1px solid #CCC; position: absolute; display: block;"></div>');
                    jQuery('#picker-' + i).hide().farbtastic(jQuery(this));

                }).focus(function() {
                    jQuery(this).next().show();
                }).blur(function() {
                    jQuery(this).next().hide();
                });
            }
        }
    };
})(syn_restaurant_manager_js, window, document);

jQuery.fn.getType = function() {
    return this[0].tagName === "INPUT" ? jQuery(this[0]).attr("type").toLowerCase() : this[0].tagName.toLowerCase();
};
/* 
 * SyntaxThemes Shortcodes Backend
 * 
 * @author Ryan Haworth
 */
(function(context, window, document, undefined) {
    
    "use strict";

    context.SynthShortcodes = function(options) {
    };
    context.SynthShortcodes.prototype = {
        backend_initialize: function() {

        },
        frontend_initialize: function() {

        },
        backend_modal_loaded: function() {

            this.on_dropcap_advanced_initialize();
        },
        on_dropcap_advanced_initialize: function() {

        }
    };
})(syn_restaurant_manager_js, window, document);
/* 
 * SyntaxThemes Modal
 * 
 * @author Ryan Haworth
 */
(function(context, window, document, undefined) {
    
    "use strict";

    context.SynthModal = function(options) {

        var obj = this;
        var defaults = {
            scope: this,
            modal_title: '',
            modal_class: '',
            modal_style: '',
            modal_bg_style: '',
            modal_content: '',
            modal_template: '',
            ajax_hook: '',
            nested_modal: null,
            save_callback: function() {
            },
            load_callback: function() {
            },
            close_callback: function() {
            },
        };
        obj.options = jQuery.extend({}, defaults, options);
        obj.modal = jQuery('<div class="synth-modal' + obj.options.modal_class + '" ' + obj.options.modal_style + '></div>');
        obj.background = jQuery('<div class="synth-modal-background" ' + obj.options.modal_bg_style + '></div>');
        obj.body = jQuery('body');
        obj.initialize();
    };
    context.SynthModal.prototype = {
        initialize: function() {

            var obj = this;
            obj.create_modal();
            obj.bind_events();
        },
        create_modal: function() {

            var obj = this;
            var content = this.options.modal_content ? obj.options.modal_content : '';
            var title = '<h4 class="synth-modal-title">' + obj.options.modal_title + '</h4>';
            var loading = '';
            var modal_html = '<div class="synth-modal-content">';
            modal_html += '<div class="synth-modal-content-header"><span class="synth-modal-icon rman-syntaxstudio"></span>' + title + '<a href="#close" class="synth-modal-close-event close-button"></a></div>';
            modal_html += '<div class="synth-modal-inner-content ' + loading + '">' + content + '</div>';
            modal_html += '<div class="synth-modal-inner-footer">';

            if (obj.options.modal_button === "save") {

                modal_html += '<a href="#save" class="synth-modal-save-event modal-button button-primary">Save</a>';
            }
            else if (obj.options.modal_button === "close")
            {
                modal_html += '<a href="#close" class="synth-modal-close-event modal-button button-primary">Close</a>';
            }

            modal_html += '</div></div>';
            obj.body.append(obj.modal).append(obj.background);
            obj.modal.html(modal_html);

            if (!obj.options.modal_content)
            {
                obj.call_ajax_content();
            }
            else
            {
                obj.execute_load_callback();
            }

        },
        bind_events: function() {


            var obj = this;
            obj.modal.on('click', '.synth-modal-save-event', function(e) {

                obj.save();
                e.preventDefault();
            });
            obj.modal.on('click', '.synth-modal-close-event', function(e) {

                obj.close();
                e.preventDefault();
            });
            obj.background.add('synth-modal-close-event', this.modal).on('click', function(e) {

                obj.close();
                e.preventDefault();
            });
        },
        loaded: function() {

            var obj = this;
            obj.execute_load_callback();
            syn_restaurant_manager_js_shortcodes.backend_modal_loaded();
        },
        save: function() {

            var obj = this;
            obj.execute_save_callback();
        },
        close: function() {

            var obj = this;
            obj.modal.remove();
            obj.background.remove();

            obj.options['close_callback'].call();
        },
        execute_load_callback: function() {

            var obj = this;
            var callback_supports = this.options.load_callback;
            var callback;
            var index = 0;
            if (callback_supports instanceof Array) {

                for (index in callback_supports) {
                    context.SynthModal.callback_support[callback_supports[index]].call(this);
                }
            }
            if (typeof callback_supports === 'string') {

                callback = callback_supports.split(",");
                if (index in callback) {
                    context.SynthModal.callback_support[callback[index]].call(this);
                }
            }
            else if (typeof callback_supports === 'function')
            {
                callback_supports.call();
            }
        },
        execute_save_callback: function() {

            var obj = this;
            var elements = {};
            var values = obj.modal.find('input, select, radio, textarea').not('[data-visibility="hidden"]').serializeArray();
            var value_array = obj.convert_values(values);
            var close = obj.options['save_callback'].call(obj.options.scope, value_array, obj.options.save_param);

            if (close !== false)
            {
                obj.close();
            }
        },
        call_ajax_content: function() {

            var obj = this;
            var inner_modal = obj.modal.find('.synth-modal-inner-content');

            jQuery.ajax({
                type: 'POST',
                url: ajaxurl,
                dataType: 'xml',
                data: {
                    action: obj.options.ajax_hook,
                    params: obj.options.modal_template
                },
                success: function(response) {

                    var html = jQuery(response).find('response_data').text();
                    inner_modal.html(html);
                    //modal has loaded the html
                    obj.loaded();
                },
                error: function(response, jqXHR, textStatus, errorThrown) {

                    var html = jQuery(response).find('response_data').text();
                    jQuery('.wrap h2').after(html);
                    alert(textStatus, errorThrown);
                },
                complete: function(response) {
                }
            });
        },
        convert_values: function(value)
        {
            var value_array = {};
            jQuery.each(value, function()
            {
                if (typeof value_array[this.name] !== 'undefined')
                {
                    if (!value_array[this.name].push)
                    {
                        value_array[this.name] = [value_array[this.name]];
                    }
                    value_array[this.name].push(this.value || '');
                }
                else
                {
                    value_array[this.name] = this.value || '';
                }
            });
            return value_array;
        }
    };
    context.SynthModal.callback_support = context.SynthModal.callback_support || {};
    context.SynthModal.callback_support.colorpicker = function() {

        syn_restaurant_manager_js_controls.color_picker_initialize();
    };
    context.SynthModal.callback_support.sortables = function() {
        modal_support_sortables();
    };
    context.SynthModal.callback_support.tinymce = function() {
        modal_support_tinymce(this);
    };
    context.SynthModal.callback_support.nested_element_builder = function() {

        syn_restaurant_manager_js_controls.nested_shortcode_control_initialize();
    };
    context.SynthModal.callback_support.table_builder = function() {

        syn_restaurant_manager_js_controls.table_builder_initialize();
        //syn_restaurant_manager_js_controls.shortcode_launcher_initialize();
        //jQuery('.shortcode-launch-button').ShortcodeLauncher();
    };
    context.SynthModal.callback_support.tabs_builder = function() {

        syn_restaurant_manager_js_controls.tabs_builder_initialize();
    };
})(syn_restaurant_manager_js, window, document);

function modal_support_sortables() {

    jQuery('.sortables').sortable({
        handle: 'span'
    });
}

function modal_support_tinymce(obj) {

    var editors = obj.modal.find('.synth_tinymce');
    var save_btn = obj.modal.find('.synth-modal-save-event');
    editors.each(function()
    {
        var el_id = this.id;
        var current = jQuery(this);
        var parent = current.parents('.wp-editor-wrap:eq(0)');
        var textarea = parent.find('textarea.synth_tinymce');
        var switch_btn = parent.find('.wp-switch-editor').removeAttr("onclick");
        var settings = {
            id: this.id,
            buttons: "strong,em,link,block,del,ins,img,ul,ol,li,code,spell,close"
        };

        tinyVersion = window.tinyMCE.majorVersion,
                executeAdd = "mceAddControl",
                executeRem = "mceRemoveControl";

        if (tinyVersion >= 4)
        {
            executeAdd = "mceAddEditor";
            executeRem = "mceRemoveEditor";
        }

        quicktags(settings);
        QTags._buttonsInit();

        // modify behavior for html editor
        switch_btn.bind('click', function()
        {
            var button = jQuery(this);
            if (button.is('.switch-tmce'))
            {
                parent.removeClass('html-active').addClass('tmce-active');
                window.tinyMCE.execCommand(executeAdd, true, el_id);
                window.tinyMCE.get(el_id).setContent(window.switchEditors.wpautop(textarea.val()), {
                    format: 'raw'
                });
            }
            else
            {
                parent.removeClass('tmce-active').addClass('html-active');
                window.tinyMCE.execCommand(executeRem, true, el_id);
            }
        }).trigger('click');
        //make sure that when the save button is pressed the textarea gets updated and sent to the editor
        save_btn.bind('click', function()
        {
            switch_btn.filter('.switch-html').trigger('click');
        });
    });
}


